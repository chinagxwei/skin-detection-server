
# Scan this file for changes every 30 seconds
refresh_rate: 30 seconds

appenders:
  # An appender named "stdout" that writes to stdout
  stdout:
    kind: console

  # An appender named "requests" that writes to a file with a custom pattern encoder
  requests:
    kind: rolling_file

    # The path of the log file. Required.
    # The path can contain environment variables of the form $ENV{name_here},
    # where 'name_here' will be the name of the environment variable that
    # will be resolved. Note that if the variable fails to resolve,
    # $ENV{name_here} will NOT be replaced in the path.
    path: log/machine-record.log

    # Specifies if the appender should append to or truncate the log file if it
    # already exists. Defaults to `true`.
    append: true

    # The encoder to use to format output. Defaults to `kind: pattern`.
    encoder:
      kind: pattern

    # The policy which handles rotation of the log file. Required.
    policy:
      # Identifies which policy is to be used. If no kind is specified, it will
      # default to "compound".
      kind: compound

      # The remainder of the configuration is passed along to the policy's
      # deserializer, and will vary based on the kind of policy.
      trigger:
        kind: size
        limit: 10 mb

      roller:
        kind: fixed_window

        # The filename pattern for archived logs. This is either an absolute path or if lacking a leading `/`,
        # relative to the `cwd` of your application. The pattern must contain at least one
        # instance of `{}`, all of which will be replaced with an archived log file's index.
        # If the file extension of the pattern is `.gz` and the `gzip` Cargo feature
        # is enabled, the archive files will be gzip-compressed.
        # Required.
        pattern: archive/machine-record.{}.log

        # The maximum number of archived logs to maintain. Required.
        count: 50

        # The base value for archived log indices. Defaults to 0.
        base: 1

# Set the default logging level to "warn" and attach the "stdout" appender to the root
root:
  level: debug
  appenders:
    - requests

loggers:
  # Raise the maximum log level for events sent to the "app::backend::db" logger to "info"
  app::backend::db:
    level: info

  # Route log events sent to the "app::requests" logger to the "requests" appender,
  # and *not* the normal appenders installed at the root
  app::requests:
    level: info
    appenders:
      - requests
    additive: false
